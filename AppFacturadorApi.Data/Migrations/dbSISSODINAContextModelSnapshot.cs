// <auto-generated />
using System;
using AppFacturadorApi.Data.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AppFacturadorApi.Data.Migrations
{
    [DbContext(typeof(dbSISSODINAContext))]
    partial class dbSISSODINAContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.Publishers", b =>
                {
                    b.Property<string>("PubId")
                        .HasColumnName("pub_id")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("country")
                        .HasDefaultValueSql("('USA')")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("PubName")
                        .HasColumnName("pub_name")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.HasKey("PubId");

                    b.ToTable("publishers");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbAbonos", b =>
                {
                    b.Property<int>("IdAbono")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idAbono")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Estado")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaCrea")
                        .HasColumnName("fecha_crea")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaUltMod")
                        .HasColumnName("fecha_ult_mod")
                        .HasColumnType("datetime");

                    b.Property<int>("IdDoc")
                        .HasColumnName("idDoc");

                    b.Property<decimal?>("Monto")
                        .HasColumnName("monto")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("TipoDoc")
                        .HasColumnName("tipoDoc");

                    b.Property<string>("UsuarioCrea")
                        .IsRequired()
                        .HasColumnName("usuario_crea")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioUltMod")
                        .IsRequired()
                        .HasColumnName("usuario_ult_mod")
                        .HasMaxLength(30);

                    b.HasKey("IdAbono");

                    b.HasIndex("IdDoc")
                        .HasName("IX_FK_tbAbonos_tbCreditos");

                    b.ToTable("tbAbonos");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbBarrios", b =>
                {
                    b.Property<string>("Provincia")
                        .HasMaxLength(1);

                    b.Property<string>("Canton")
                        .HasColumnName("canton")
                        .HasMaxLength(2);

                    b.Property<string>("Distrito")
                        .HasColumnName("distrito")
                        .HasMaxLength(2);

                    b.Property<string>("Barrio")
                        .HasColumnName("barrio")
                        .HasMaxLength(2);

                    b.Property<string>("Nombre")
                        .HasColumnName("nombre")
                        .HasMaxLength(50);

                    b.HasKey("Provincia", "Canton", "Distrito", "Barrio");

                    b.ToTable("tbBarrios");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbCajas", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("IdEmpresa")
                        .HasColumnName("idEmpresa")
                        .HasMaxLength(30);

                    b.Property<int>("IdTipoEmpresa")
                        .HasColumnName("idTipoEmpresa");

                    b.Property<int>("IdSucursal")
                        .HasColumnName("idSucursal");

                    b.Property<string>("Descripcion")
                        .HasColumnName("descripcion")
                        .HasMaxLength(500);

                    b.Property<bool>("Estado")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaCrea")
                        .HasColumnName("fecha_crea")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaUltMod")
                        .HasColumnName("fecha_ult_mod")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("nombre")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioCrea")
                        .IsRequired()
                        .HasColumnName("usuario_crea")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioUltMod")
                        .IsRequired()
                        .HasColumnName("usuario_ult_mod")
                        .HasMaxLength(30);

                    b.HasKey("Id", "IdEmpresa", "IdTipoEmpresa", "IdSucursal");

                    b.HasIndex("IdSucursal", "IdEmpresa", "IdTipoEmpresa");

                    b.ToTable("tbCajas");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbCajaUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Estado")
                        .HasColumnName("estado");

                    b.Property<DateTime>("Fecha")
                        .HasColumnName("fecha")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaCrea")
                        .HasColumnName("fecha_crea")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaUltMod")
                        .HasColumnName("fecha_ult_mod")
                        .HasColumnType("datetime");

                    b.Property<int>("IdCaja")
                        .HasColumnName("idCaja");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnName("idUser")
                        .HasMaxLength(30);

                    b.Property<int>("TipoId")
                        .HasColumnName("tipoId");

                    b.Property<int>("TipoMovCaja")
                        .HasColumnName("tipoMovCaja");

                    b.Property<int?>("Total")
                        .HasColumnName("total");

                    b.Property<string>("UsuarioCrea")
                        .IsRequired()
                        .HasColumnName("usuario_crea")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioUltMod")
                        .IsRequired()
                        .HasColumnName("usuario_ult_mod")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("IdCaja")
                        .HasName("IX_FK_tbCajaUsuario_tbCajas");

                    b.HasIndex("TipoId", "IdUser")
                        .HasName("IX_FK_tbCajaUsuario_tbUsuarios");

                    b.ToTable("tbCajaUsuario");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbCajaUsuMonedas", b =>
                {
                    b.Property<string>("IdMoneda")
                        .HasColumnName("idMoneda")
                        .HasMaxLength(3);

                    b.Property<int>("IdCajaUsuario")
                        .HasColumnName("idCajaUsuario");

                    b.Property<int>("Cantidad")
                        .HasColumnName("cantidad");

                    b.Property<int>("Subtotal")
                        .HasColumnName("subtotal");

                    b.HasKey("IdMoneda", "IdCajaUsuario");

                    b.HasIndex("IdCajaUsuario")
                        .HasName("IX_FK_tbCajaUsuMonedas_tbCajaUsuario");

                    b.ToTable("tbCajaUsuMonedas");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbCanton", b =>
                {
                    b.Property<string>("Provincia")
                        .HasMaxLength(1);

                    b.Property<string>("Canton")
                        .HasMaxLength(2);

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Provincia", "Canton");

                    b.ToTable("tbCanton");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbCategoriaProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnName("descripcion")
                        .HasMaxLength(500);

                    b.Property<bool>("Estado")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaCrea")
                        .HasColumnName("fecha_crea")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaUltMod")
                        .HasColumnName("fecha_ult_mod")
                        .HasColumnType("datetime");

                    b.Property<string>("Fotocategoria")
                        .HasColumnName("fotocategoria")
                        .HasMaxLength(2000);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("nombre")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioCrea")
                        .IsRequired()
                        .HasColumnName("usuario_crea")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioUltMod")
                        .IsRequired()
                        .HasColumnName("usuario_ult_mod")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("tbCategoriaProducto");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbClientes", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(30);

                    b.Property<int>("TipoId")
                        .HasColumnName("tipoId");

                    b.Property<string>("Contacto")
                        .HasColumnName("contacto")
                        .HasMaxLength(50);

                    b.Property<string>("CorreoElectConta")
                        .HasColumnName("correoElectConta")
                        .HasMaxLength(50);

                    b.Property<int>("CreditoMax")
                        .HasColumnName("creditoMax");

                    b.Property<string>("Descripcion")
                        .HasColumnName("descripcion")
                        .HasMaxLength(500);

                    b.Property<int>("DescuentoMax")
                        .HasColumnName("descuentoMax");

                    b.Property<string>("EncargadoConta")
                        .HasColumnName("encargadoConta")
                        .HasMaxLength(50);

                    b.Property<bool>("Estado")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaCrea")
                        .HasColumnName("fecha_crea")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaUltMod")
                        .HasColumnName("fecha_ult_mod")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdExonercion")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idExonercion")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("NombreTributario")
                        .HasColumnName("nombreTributario")
                        .HasMaxLength(50);

                    b.Property<int>("PlazoCreditoMax")
                        .HasColumnName("plazoCreditoMax");

                    b.Property<int>("PrecioAplicar")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("precioAplicar")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("TipoCliente")
                        .HasColumnName("tipoCliente");

                    b.Property<string>("UsuarioCrea")
                        .IsRequired()
                        .HasColumnName("usuario_crea")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioUltCrea")
                        .IsRequired()
                        .HasColumnName("usuario_ult_crea")
                        .HasMaxLength(30);

                    b.HasKey("Id", "TipoId");

                    b.HasIndex("IdExonercion");

                    b.HasIndex("TipoCliente")
                        .HasName("IX_FK_tbClientes_tbTipoClientes");

                    b.HasIndex("TipoId", "Id");

                    b.ToTable("tbClientes");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbCreditos", b =>
                {
                    b.Property<int>("IdCredito")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idCredito")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EstadoCredito")
                        .HasColumnName("estadoCredito");

                    b.Property<DateTime>("FechaCrea")
                        .HasColumnName("fecha_crea")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaUltMod")
                        .HasColumnName("fecha_ult_mod")
                        .HasColumnType("datetime");

                    b.Property<string>("IdCliente")
                        .IsRequired()
                        .HasColumnName("idCliente")
                        .HasMaxLength(30);

                    b.Property<bool>("IdEstado")
                        .HasColumnName("idEstado");

                    b.Property<int>("IdMov")
                        .HasColumnName("idMov");

                    b.Property<decimal>("MontoCredito")
                        .HasColumnName("montoCredito")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal>("SaldoCredito")
                        .HasColumnName("saldoCredito")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("TipoCliente")
                        .HasColumnName("tipoCliente");

                    b.Property<string>("UsuarioCrea")
                        .IsRequired()
                        .HasColumnName("usuario_crea")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioUltMod")
                        .IsRequired()
                        .HasColumnName("usuario_ult_mod")
                        .HasMaxLength(30);

                    b.HasKey("IdCredito");

                    b.HasIndex("IdMov")
                        .HasName("IX_FK_tbCreditos_tbMovimientos");

                    b.HasIndex("IdCliente", "TipoCliente")
                        .HasName("IX_FK_tbCreditos_tbClientes");

                    b.ToTable("tbCreditos");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbDetalleDocumento", b =>
                {
                    b.Property<int>("IdTipoDoc")
                        .HasColumnName("idTipoDoc");

                    b.Property<int>("IdDoc")
                        .HasColumnName("idDoc");

                    b.Property<string>("IdProducto")
                        .HasColumnName("idProducto")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal>("Cantidad")
                        .HasColumnName("cantidad");

                    b.Property<decimal>("Descuento")
                        .HasColumnName("descuento");

                    b.Property<decimal>("MontoTotal")
                        .HasColumnName("montoTotal");

                    b.Property<decimal>("MontoTotalDesc")
                        .HasColumnName("montoTotalDesc");

                    b.Property<decimal>("MontoTotalExo")
                        .HasColumnName("montoTotalExo");

                    b.Property<decimal>("MontoTotalImp")
                        .HasColumnName("montoTotalImp");

                    b.Property<int>("NumLinea")
                        .HasColumnName("numLinea");

                    b.Property<decimal>("Precio")
                        .HasColumnName("precio");

                    b.Property<decimal>("TotalLinea")
                        .HasColumnName("totalLinea");

                    b.HasKey("IdTipoDoc", "IdDoc", "IdProducto");

                    b.HasIndex("IdDoc")
                        .HasName("IX_FK_tbDetalleFactura_tbFactura");

                    b.HasIndex("IdProducto")
                        .HasName("IX_FK_tbDetalleFactura_tbProducto");

                    b.HasIndex("IdDoc", "IdTipoDoc");

                    b.ToTable("tbDetalleDocumento");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbDetalleImpresion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("DireccionEmpresa")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("LogoEmpresa")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<string>("MensajeDespedida")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("MensajeTributacion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("NombreEmpresa")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("TelefonoEmpresa")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("tbDetalleImpresion");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbDetalleMovimiento", b =>
                {
                    b.Property<int>("IdDetalleMov")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idDetalleMov")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdMov")
                        .HasColumnName("idMov");

                    b.Property<int>("IdIngrediente")
                        .HasColumnName("idIngrediente");

                    b.Property<int>("Cantidad")
                        .HasColumnName("cantidad");

                    b.Property<decimal?>("Monto")
                        .HasColumnName("monto")
                        .HasColumnType("decimal(19, 4)");

                    b.HasKey("IdDetalleMov", "IdMov", "IdIngrediente");

                    b.HasIndex("IdIngrediente")
                        .HasName("IX_FK_tbDetalleMovimiento_tbIngredientes");

                    b.HasIndex("IdMov")
                        .HasName("IX_FK_tbDetalleMovimiento_tbMovimientos");

                    b.ToTable("tbDetalleMovimiento");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbDetalleProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Cantidad")
                        .HasColumnName("cantidad");

                    b.Property<int>("IdIngrediente")
                        .HasColumnName("idIngrediente");

                    b.Property<string>("IdProducto")
                        .IsRequired()
                        .HasColumnName("idProducto")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdIngrediente")
                        .HasName("IX_FK_tbDetalleProducto_tbIngredientes");

                    b.HasIndex("IdProducto")
                        .HasName("IX_FK_tbDetalleProducto_tbProducto");

                    b.ToTable("tbDetalleProducto");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbDistrito", b =>
                {
                    b.Property<string>("Provincia")
                        .HasMaxLength(1);

                    b.Property<string>("Canton")
                        .HasMaxLength(2);

                    b.Property<string>("Distrito")
                        .HasMaxLength(2);

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Provincia", "Canton", "Distrito");

                    b.ToTable("tbDistrito");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbDocumento", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<int>("TipoDocumento")
                        .HasColumnName("tipoDocumento");

                    b.Property<string>("Clave")
                        .HasColumnName("clave")
                        .HasMaxLength(50);

                    b.Property<string>("ClaveRef")
                        .HasColumnName("claveRef")
                        .HasMaxLength(50);

                    b.Property<int?>("CodigoRef")
                        .HasColumnName("codigoRef");

                    b.Property<string>("Consecutivo")
                        .HasColumnName("consecutivo")
                        .HasMaxLength(20);

                    b.Property<string>("Correo1")
                        .HasColumnName("correo1")
                        .HasMaxLength(50);

                    b.Property<string>("Correo2")
                        .HasColumnName("correo2")
                        .HasMaxLength(50);

                    b.Property<bool>("Estado")
                        .HasColumnName("estado");

                    b.Property<int>("EstadoFactura")
                        .HasColumnName("estadoFactura");

                    b.Property<string>("EstadoFacturaHacienda")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Fecha")
                        .HasColumnName("fecha")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaCrea")
                        .HasColumnName("fecha_crea")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaRef")
                        .HasColumnName("fechaRef")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaUltMod")
                        .HasColumnName("fecha_ult_mod")
                        .HasColumnType("datetime");

                    b.Property<string>("IdCliente")
                        .HasColumnName("idCliente")
                        .HasMaxLength(30);

                    b.Property<string>("IdEmpresa")
                        .IsRequired()
                        .HasColumnName("idEmpresa")
                        .HasMaxLength(30);

                    b.Property<string>("MensajeReporteHacienda")
                        .HasColumnName("mensajeReporteHacienda")
                        .HasMaxLength(50);

                    b.Property<bool?>("MensajeRespHacienda")
                        .HasColumnName("mensajeRespHacienda");

                    b.Property<bool>("NotificarCorreo")
                        .HasColumnName("notificarCorreo");

                    b.Property<string>("Observaciones")
                        .HasColumnName("observaciones")
                        .HasMaxLength(270);

                    b.Property<int?>("Plazo")
                        .HasColumnName("plazo");

                    b.Property<string>("Razon")
                        .HasColumnName("razon")
                        .HasMaxLength(180);

                    b.Property<string>("RefPago")
                        .HasColumnName("refPago")
                        .HasMaxLength(30);

                    b.Property<bool>("ReporteAceptaHacienda")
                        .HasColumnName("reporteAceptaHacienda");

                    b.Property<bool>("ReporteElectronic")
                        .HasColumnName("reporteElectronic");

                    b.Property<decimal>("TipoCambio")
                        .HasColumnName("tipoCambio")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("TipoDocRef")
                        .HasColumnName("tipoDocRef");

                    b.Property<int?>("TipoIdCliente")
                        .HasColumnName("tipoIdCliente");

                    b.Property<int>("TipoIdEmpresa")
                        .HasColumnName("tipoIdEmpresa");

                    b.Property<int>("TipoMoneda")
                        .HasColumnName("tipoMoneda");

                    b.Property<int>("TipoPago")
                        .HasColumnName("tipoPago");

                    b.Property<int>("TipoVenta")
                        .HasColumnName("tipoVenta");

                    b.Property<string>("UsuarioCrea")
                        .IsRequired()
                        .HasColumnName("usuario_crea")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioUltMod")
                        .IsRequired()
                        .HasColumnName("usuario_ult_mod")
                        .HasMaxLength(30);

                    b.Property<string>("XmlFirmado")
                        .HasColumnName("xmlFirmado");

                    b.Property<string>("XmlRespuesta")
                        .HasColumnName("xmlRespuesta");

                    b.Property<string>("XmlSinFirma")
                        .HasColumnName("xmlSinFirma");

                    b.HasKey("Id", "TipoDocumento");

                    b.HasIndex("TipoDocumento");

                    b.HasIndex("TipoMoneda");

                    b.HasIndex("TipoPago");

                    b.HasIndex("TipoVenta");

                    b.HasIndex("IdCliente", "TipoIdCliente")
                        .HasName("IX_FK_tbFactura_tbClientes");

                    b.HasIndex("IdEmpresa", "TipoIdEmpresa");

                    b.ToTable("tbDocumento");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbEmpleado", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(30);

                    b.Property<int>("TipoId")
                        .HasColumnName("tipoId");

                    b.Property<string>("Direccion")
                        .HasColumnName("direccion")
                        .HasMaxLength(500);

                    b.Property<bool>("EsContraDefinido")
                        .HasColumnName("esContraDefinido");

                    b.Property<bool>("Estado")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaCrea")
                        .HasColumnName("fecha_crea")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnName("fecha_ingreso")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaSalida")
                        .HasColumnName("fecha_salida")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaUltMod")
                        .HasColumnName("fecha_ult_mod")
                        .HasColumnType("datetime");

                    b.Property<int>("IdPuesto")
                        .HasColumnName("idPuesto");

                    b.Property<string>("UsuarioCrea")
                        .IsRequired()
                        .HasColumnName("usuario_crea")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioUltCrea")
                        .IsRequired()
                        .HasColumnName("usuario_ult_crea")
                        .HasMaxLength(30);

                    b.HasKey("Id", "TipoId");

                    b.HasIndex("IdPuesto")
                        .HasName("IX_FK_tbEmpleado_tbTipoPuesto");

                    b.HasIndex("TipoId", "Id");

                    b.ToTable("tbEmpleado");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbEmpresa", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(30);

                    b.Property<int>("TipoId")
                        .HasColumnName("tipoId");

                    b.Property<bool?>("AmbientePruebas")
                        .HasColumnName("ambientePruebas");

                    b.Property<string>("CertificadoInstalado")
                        .HasColumnName("certificadoInstalado")
                        .HasMaxLength(100);

                    b.Property<string>("ClaveApiHacienda")
                        .HasColumnName("claveApiHacienda")
                        .HasMaxLength(100);

                    b.Property<string>("ContrasenaCorreo")
                        .HasColumnName("contrasenaCorreo")
                        .HasMaxLength(50);

                    b.Property<string>("CorreoElectronicoEmpresa")
                        .HasColumnName("correoElectronicoEmpresa")
                        .HasMaxLength(50);

                    b.Property<string>("CuerpoCorreo")
                        .HasColumnName("cuerpoCorreo")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("FechaCaducidad")
                        .HasColumnName("fechaCaducidad")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaResolucio")
                        .HasColumnName("fechaResolucio");

                    b.Property<bool?>("ImprimeDoc")
                        .HasColumnName("imprimeDoc");

                    b.Property<string>("NombreComercial")
                        .HasColumnName("nombreComercial")
                        .HasMaxLength(100);

                    b.Property<string>("NumeroResolucion")
                        .HasColumnName("numeroResolucion")
                        .HasMaxLength(100);

                    b.Property<int?>("Pin")
                        .HasColumnName("pin");

                    b.Property<string>("RazonSocial")
                        .HasColumnName("razonSocial")
                        .HasMaxLength(100);

                    b.Property<string>("RutaCertificado")
                        .HasColumnName("rutaCertificado")
                        .HasMaxLength(100);

                    b.Property<string>("RutaXmlcompras")
                        .HasColumnName("rutaXMLCompras")
                        .HasMaxLength(500);

                    b.Property<string>("SubjectCorreo")
                        .HasColumnName("subjectCorreo")
                        .HasMaxLength(50);

                    b.Property<string>("UsuarioApiHacienda")
                        .HasColumnName("usuarioApiHacienda")
                        .HasMaxLength(100);

                    b.HasKey("Id", "TipoId");

                    b.HasIndex("TipoId", "Id");

                    b.ToTable("tbEmpresa");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbExoneraciones", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Descripcion")
                        .HasColumnName("descripcion")
                        .HasMaxLength(500);

                    b.Property<string>("Nombre")
                        .HasColumnName("nombre")
                        .HasMaxLength(30);

                    b.Property<int?>("Valor")
                        .HasColumnName("valor");

                    b.HasKey("Id");

                    b.ToTable("tbExoneraciones");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbHorarioProveedor", b =>
                {
                    b.Property<int>("IdTipo")
                        .HasColumnName("idTipo");

                    b.Property<string>("IdProveedor")
                        .HasColumnName("idProveedor")
                        .HasMaxLength(30);

                    b.Property<int>("IdTipoHorario")
                        .HasColumnName("idTipoHorario");

                    b.Property<bool?>("Domingo")
                        .HasColumnName("domingo");

                    b.Property<bool?>("Jueves")
                        .HasColumnName("jueves");

                    b.Property<bool?>("Lunes")
                        .HasColumnName("lunes");

                    b.Property<bool?>("Martes")
                        .HasColumnName("martes");

                    b.Property<bool?>("Miercoles")
                        .HasColumnName("miercoles");

                    b.Property<bool?>("Sabado")
                        .HasColumnName("sabado");

                    b.Property<bool?>("Viernes")
                        .HasColumnName("viernes");

                    b.HasKey("IdTipo", "IdProveedor", "IdTipoHorario");

                    b.HasIndex("IdProveedor", "IdTipo");

                    b.ToTable("tbHorarioProveedor");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbImpuestos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnName("descripcion")
                        .HasMaxLength(30);

                    b.Property<bool>("Estado")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaCrea")
                        .HasColumnName("fecha_crea")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaUltMod")
                        .HasColumnName("fecha_ult_mod")
                        .HasColumnType("datetime");

                    b.Property<string>("UsuarioCrea")
                        .IsRequired()
                        .HasColumnName("usuario_crea")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioUltMod")
                        .IsRequired()
                        .HasColumnName("usuario_ult_mod")
                        .HasMaxLength(30);

                    b.Property<decimal?>("Valor")
                        .HasColumnName("valor")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("Id");

                    b.ToTable("tbImpuestos");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbIngredienteProveedor", b =>
                {
                    b.Property<int>("TbIngredientesIdIngrediente")
                        .HasColumnName("tbIngredientes_idIngrediente");

                    b.Property<string>("TbProveedoresId")
                        .HasColumnName("tbProveedores_id")
                        .HasMaxLength(30);

                    b.Property<int>("TbProveedoresTipoId")
                        .HasColumnName("tbProveedores_tipoId");

                    b.HasKey("TbIngredientesIdIngrediente", "TbProveedoresId", "TbProveedoresTipoId");

                    b.HasIndex("TbProveedoresId", "TbProveedoresTipoId")
                        .HasName("IX_FK_tbIngredienteProveedor_tbProveedores");

                    b.ToTable("tbIngredienteProveedor");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbIngredientes", b =>
                {
                    b.Property<int>("IdIngrediente")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idIngrediente")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Estado")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaCrea")
                        .HasColumnName("fecha_crea")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaUltMod")
                        .HasColumnName("fecha_ult_mod")
                        .HasColumnType("datetime");

                    b.Property<int>("IdTipoIngrediente")
                        .HasColumnName("idTipoIngrediente");

                    b.Property<int>("IdTipoMedida")
                        .HasColumnName("idTipoMedida");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("nombre")
                        .HasMaxLength(50);

                    b.Property<decimal>("PrecioCompra")
                        .HasColumnName("precioCompra")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<string>("UsuarioCrea")
                        .IsRequired()
                        .HasColumnName("usuario_crea")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioUltMod")
                        .IsRequired()
                        .HasColumnName("usuario_ult_mod")
                        .HasMaxLength(30);

                    b.HasKey("IdIngrediente");

                    b.HasIndex("IdTipoIngrediente")
                        .HasName("IX_FK_tbIngredientes_tbTipoIngrediente");

                    b.HasIndex("IdTipoMedida")
                        .HasName("IX_FK_tbIngredientes_tbTipoMedidas");

                    b.ToTable("tbIngredientes");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbInventario", b =>
                {
                    b.Property<string>("IdProducto")
                        .HasColumnName("idProducto")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("CantMax")
                        .HasColumnName("cant_max")
                        .HasColumnType("decimal(18, 1)");

                    b.Property<decimal?>("CantMin")
                        .HasColumnName("cant_min")
                        .HasColumnType("decimal(18, 1)");

                    b.Property<decimal>("Cantidad")
                        .HasColumnName("cantidad")
                        .HasColumnType("decimal(18, 1)");

                    b.Property<bool>("Estado")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaCrea")
                        .HasColumnName("fecha_crea")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaUltMod")
                        .HasColumnName("fecha_ult_mod")
                        .HasColumnType("datetime");

                    b.Property<string>("UsuarioCrea")
                        .IsRequired()
                        .HasColumnName("usuario_crea")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioUltMod")
                        .IsRequired()
                        .HasColumnName("usuario_ult_mod")
                        .HasMaxLength(30);

                    b.HasKey("IdProducto");

                    b.HasIndex("IdProducto")
                        .HasName("IX_FK_tbInventario_tbIngredientes");

                    b.ToTable("tbInventario");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbMonedas", b =>
                {
                    b.Property<string>("IdMoneda")
                        .HasColumnName("idMoneda")
                        .HasMaxLength(3);

                    b.Property<bool>("Estado")
                        .HasColumnName("estado");

                    b.Property<int>("IdTipoMoneda")
                        .HasColumnName("idTipoMoneda");

                    b.Property<string>("Moneda")
                        .IsRequired()
                        .HasColumnName("moneda")
                        .HasMaxLength(10);

                    b.HasKey("IdMoneda");

                    b.HasIndex("IdTipoMoneda")
                        .HasName("IX_FK_tbMonedas_tbTipoMoneda");

                    b.ToTable("tbMonedas");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbMovimientoCajaUsuario", b =>
                {
                    b.Property<int>("TbCajaUsuarioId")
                        .HasColumnName("tbCajaUsuario_id");

                    b.Property<int>("TbMovimientosIdMovimiento")
                        .HasColumnName("tbMovimientos_idMovimiento");

                    b.HasKey("TbCajaUsuarioId", "TbMovimientosIdMovimiento");

                    b.HasIndex("TbMovimientosIdMovimiento")
                        .HasName("IX_FK_tbMovimientoCajaUsuario_tbMovimientos");

                    b.ToTable("tbMovimientoCajaUsuario");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbMovimientos", b =>
                {
                    b.Property<int>("IdMovimiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idMovimiento")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Estado")
                        .HasColumnName("estado");

                    b.Property<DateTime>("Fecha")
                        .HasColumnName("fecha")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaCrea")
                        .HasColumnName("fecha_crea")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaUltMod")
                        .HasColumnName("fecha_ult_mod")
                        .HasColumnType("datetime");

                    b.Property<int>("IdTipoMov")
                        .HasColumnName("idTipoMov");

                    b.Property<string>("Motivo")
                        .HasColumnName("motivo")
                        .HasMaxLength(500);

                    b.Property<decimal>("Total")
                        .HasColumnName("total")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<string>("UsuarioCrea")
                        .IsRequired()
                        .HasColumnName("usuario_crea")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioUltMod")
                        .IsRequired()
                        .HasColumnName("usuario_ult_mod")
                        .HasMaxLength(30);

                    b.HasKey("IdMovimiento");

                    b.HasIndex("IdTipoMov")
                        .HasName("IX_FK_tbMovimientos_tbTipoMovimiento");

                    b.ToTable("tbMovimientos");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbPagos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CantidadHoraExtra")
                        .HasColumnName("cantidad_horaExtra");

                    b.Property<int>("CantidadHoras")
                        .HasColumnName("Cantidad_horas");

                    b.Property<string>("Descripcion")
                        .HasColumnName("descripcion")
                        .HasMaxLength(500);

                    b.Property<DateTime>("FechaCrea")
                        .HasColumnName("fecha_crea")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaPago")
                        .HasColumnName("fecha_pago")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaUltMod")
                        .HasColumnName("fecha_ult_mod")
                        .HasColumnType("datetime");

                    b.Property<string>("IdEmpleado")
                        .IsRequired()
                        .HasColumnName("idEmpleado")
                        .HasMaxLength(30);

                    b.Property<int>("IdMovimiento")
                        .HasColumnName("idMovimiento");

                    b.Property<int>("TipoId")
                        .HasColumnName("tipoId");

                    b.Property<float>("Total")
                        .HasColumnName("total");

                    b.Property<string>("UsuarioCrea")
                        .IsRequired()
                        .HasColumnName("usuario_crea")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioUltMod")
                        .IsRequired()
                        .HasColumnName("usuario_ult_mod")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("IdMovimiento")
                        .HasName("IX_FK_tbPagos_tbMovimientos");

                    b.HasIndex("IdEmpleado", "TipoId")
                        .HasName("IX_FK_tbPagos_tbEmpleado");

                    b.ToTable("tbPagos");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbParametrosEmpresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AprobacionDescuento")
                        .HasColumnName("aprobacionDescuento");

                    b.Property<decimal?>("CambioDolar")
                        .HasColumnName("cambioDolar");

                    b.Property<bool?>("ClienteObligatorioFact")
                        .HasColumnName("clienteObligatorioFact");

                    b.Property<decimal?>("DescuentoBase")
                        .HasColumnName("descuentoBase");

                    b.Property<bool?>("FacturacionElectronica")
                        .HasColumnName("facturacionElectronica");

                    b.Property<string>("IdEmpresa")
                        .IsRequired()
                        .HasColumnName("idEmpresa")
                        .HasMaxLength(30);

                    b.Property<int>("IdTipoEmpresa")
                        .HasColumnName("idTipoEmpresa");

                    b.Property<bool>("ManejaInventario")
                        .HasColumnName("manejaInventario");

                    b.Property<int?>("PlazoMaximoCredito")
                        .HasColumnName("plazoMaximoCredito");

                    b.Property<int?>("PlazoMaximoProforma")
                        .HasColumnName("plazoMaximoProforma");

                    b.Property<int?>("PrecioBase")
                        .HasColumnName("precioBase");

                    b.Property<float>("UtilidadBase")
                        .HasColumnName("utilidadBase");

                    b.HasKey("Id");

                    b.HasIndex("IdEmpresa", "IdTipoEmpresa");

                    b.ToTable("tbParametrosEmpresa");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbPermisos", b =>
                {
                    b.Property<int>("TbRequerimientosIdReq")
                        .HasColumnName("tbRequerimientos_idReq");

                    b.Property<int>("TbRolesIdRol")
                        .HasColumnName("tbRoles_idRol");

                    b.HasKey("TbRequerimientosIdReq", "TbRolesIdRol");

                    b.HasIndex("TbRolesIdRol")
                        .HasName("IX_FK_tbPermisos_tbRoles");

                    b.ToTable("tbPermisos");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbPersona", b =>
                {
                    b.Property<int>("TipoId")
                        .HasColumnName("tipoId");

                    b.Property<string>("Identificacion")
                        .HasColumnName("identificacion")
                        .HasMaxLength(30);

                    b.Property<string>("Apellido1")
                        .HasColumnName("apellido1")
                        .HasMaxLength(30);

                    b.Property<string>("Apellido2")
                        .HasColumnName("apellido2")
                        .HasMaxLength(30);

                    b.Property<string>("Barrio")
                        .HasColumnName("barrio")
                        .HasMaxLength(2);

                    b.Property<string>("Canton")
                        .HasColumnName("canton")
                        .HasMaxLength(2);

                    b.Property<string>("CodigoPaisFax")
                        .HasColumnName("codigoPaisFax")
                        .HasMaxLength(3);

                    b.Property<string>("CodigoPaisTel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("codigoPaisTel")
                        .HasDefaultValueSql("((506))")
                        .HasMaxLength(10);

                    b.Property<string>("CorreoElectronico")
                        .HasColumnName("correoElectronico")
                        .HasMaxLength(50);

                    b.Property<string>("Distrito")
                        .HasColumnName("distrito")
                        .HasMaxLength(2);

                    b.Property<int?>("Fax")
                        .HasColumnName("fax");

                    b.Property<DateTime?>("FechaNac")
                        .HasColumnName("fechaNac")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("nombre")
                        .HasMaxLength(100);

                    b.Property<string>("OtrasSenas")
                        .HasColumnName("otrasSenas")
                        .HasMaxLength(500);

                    b.Property<string>("Provincia")
                        .HasColumnName("provincia")
                        .HasMaxLength(1);

                    b.Property<int?>("Sexo")
                        .HasColumnName("sexo");

                    b.Property<int>("Telefono")
                        .HasColumnName("telefono");

                    b.HasKey("TipoId", "Identificacion");

                    b.HasIndex("Provincia", "Canton", "Distrito", "Barrio");

                    b.ToTable("tbPersona");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbPersonasTribunalS", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Apellido1")
                        .HasColumnName("APELLIDO1")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Apellido2")
                        .HasColumnName("APELLIDO2")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Codigopostal")
                        .HasColumnName("CODIGOPOSTAL")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Nombre")
                        .HasColumnName("NOMBRE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Sexo")
                        .HasColumnName("SEXO")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("tbPersonasTribunalS");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbProducto", b =>
                {
                    b.Property<string>("IdProducto")
                        .HasColumnName("idProducto")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("AplicaDescuento")
                        .HasColumnName("aplicaDescuento");

                    b.Property<decimal?>("DescuentoMax")
                        .HasColumnName("descuento_max")
                        .HasColumnType("decimal(18, 1)");

                    b.Property<bool>("EsExento")
                        .HasColumnName("esExento");

                    b.Property<bool>("Estado")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaCrea")
                        .HasColumnName("fecha_crea")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaUltMod")
                        .HasColumnName("fecha_ult_mod")
                        .HasColumnType("datetime");

                    b.Property<string>("Foto")
                        .HasColumnName("foto")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<int>("IdCategoria")
                        .HasColumnName("id_categoria");

                    b.Property<int>("IdMedida")
                        .HasColumnName("idMedida");

                    b.Property<string>("IdProveedor")
                        .HasColumnName("idProveedor")
                        .HasMaxLength(30);

                    b.Property<int?>("IdTipoIdProveedor")
                        .HasColumnName("idTipoIdProveedor");

                    b.Property<int>("IdTipoImpuesto")
                        .HasColumnName("idTipoImpuesto");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("nombre")
                        .HasMaxLength(160);

                    b.Property<decimal>("PrecioReal")
                        .HasColumnName("precio_real")
                        .HasColumnType("decimal(18, 1)");

                    b.Property<decimal?>("PrecioUtilidad1")
                        .HasColumnName("precioUtilidad1");

                    b.Property<decimal?>("PrecioUtilidad2")
                        .HasColumnName("precioUtilidad2");

                    b.Property<decimal?>("PrecioUtilidad3")
                        .HasColumnName("precioUtilidad3");

                    b.Property<bool?>("PrecioVariable")
                        .HasColumnName("precioVariable");

                    b.Property<decimal>("PrecioVenta1")
                        .HasColumnName("precioVenta1");

                    b.Property<decimal>("PrecioVenta2")
                        .HasColumnName("precioVenta2");

                    b.Property<decimal>("PrecioVenta3")
                        .HasColumnName("precioVenta3");

                    b.Property<string>("UsuarioCrea")
                        .IsRequired()
                        .HasColumnName("usuario_crea")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioUltMod")
                        .IsRequired()
                        .HasColumnName("usuario_ult_mod")
                        .HasMaxLength(30);

                    b.Property<decimal>("Utilidad1Porc")
                        .HasColumnName("utilidad1Porc")
                        .HasColumnType("decimal(18, 1)");

                    b.Property<decimal>("Utilidad2Porc")
                        .HasColumnName("utilidad2Porc")
                        .HasColumnType("decimal(18, 1)");

                    b.Property<decimal>("Utilidad3Porc")
                        .HasColumnName("utilidad3Porc")
                        .HasColumnType("decimal(18, 1)");

                    b.HasKey("IdProducto");

                    b.HasIndex("IdCategoria")
                        .HasName("IX_FK_tbProducto_tbCategoriaProducto");

                    b.HasIndex("IdMedida");

                    b.HasIndex("IdTipoImpuesto");

                    b.HasIndex("IdProveedor", "IdTipoIdProveedor");

                    b.ToTable("tbProducto");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbProveedores", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(30);

                    b.Property<int>("TipoId")
                        .HasColumnName("tipoId");

                    b.Property<string>("ContactoProveedor")
                        .IsRequired()
                        .HasColumnName("contactoProveedor")
                        .HasMaxLength(150);

                    b.Property<string>("CorreoElectConta")
                        .HasColumnName("correoElectConta")
                        .HasMaxLength(50);

                    b.Property<string>("CuentaBancaria")
                        .HasColumnName("cuentaBancaria")
                        .HasMaxLength(50);

                    b.Property<string>("Descripcion")
                        .HasColumnName("descripcion")
                        .HasMaxLength(500);

                    b.Property<string>("EncargadoConta")
                        .HasColumnName("encargadoConta")
                        .HasMaxLength(50);

                    b.Property<bool>("Estado")
                        .HasColumnName("estado");

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasMaxLength(10);

                    b.Property<DateTime>("FechaCrea")
                        .HasColumnName("fecha_crea")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaUltMod")
                        .HasColumnName("fecha_ult_mod")
                        .HasColumnType("datetime");

                    b.Property<string>("NombreTributario")
                        .HasColumnName("nombreTributario")
                        .HasMaxLength(50);

                    b.Property<string>("UsuarioCrea")
                        .IsRequired()
                        .HasColumnName("usuario_crea")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioUltMod")
                        .IsRequired()
                        .HasColumnName("usuario_ult_mod")
                        .HasMaxLength(30);

                    b.HasKey("Id", "TipoId");

                    b.HasIndex("TipoId", "Id");

                    b.ToTable("tbProveedores");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbProvincia", b =>
                {
                    b.Property<string>("Cod")
                        .HasMaxLength(1);

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Cod");

                    b.HasIndex("Nombre")
                        .IsUnique()
                        .HasName("UQ__tbProvin__75E3EFCF25DA01E3")
                        .HasFilter("[Nombre] IS NOT NULL");

                    b.ToTable("tbProvincia");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbReporteHacienda", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("ClaveDocEmisor")
                        .IsRequired()
                        .HasColumnName("claveDocEmisor")
                        .HasMaxLength(50);

                    b.Property<string>("ClaveReceptor")
                        .IsRequired()
                        .HasColumnName("claveReceptor")
                        .HasMaxLength(50);

                    b.Property<string>("ConsecutivoReceptor")
                        .IsRequired()
                        .HasColumnName("consecutivoReceptor")
                        .HasMaxLength(20);

                    b.Property<string>("CorreoElectronico")
                        .HasColumnName("correoElectronico")
                        .HasMaxLength(50);

                    b.Property<int>("EstadoRecibido")
                        .HasColumnName("estadoRecibido");

                    b.Property<string>("EstadoRespHacienda")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Fecha")
                        .HasColumnName("fecha")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaCrea")
                        .HasColumnName("fecha_crea")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnName("fechaEmision")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaUltMod")
                        .HasColumnName("fecha_ult_mod")
                        .HasColumnType("datetime");

                    b.Property<string>("IdEmisor")
                        .IsRequired()
                        .HasColumnName("idEmisor")
                        .HasMaxLength(30);

                    b.Property<string>("IdEmpresa")
                        .IsRequired()
                        .HasColumnName("idEmpresa")
                        .HasMaxLength(30);

                    b.Property<string>("MensajeReporteHacienda")
                        .HasColumnName("mensajeReporteHacienda")
                        .HasMaxLength(50);

                    b.Property<bool>("MensajeRespHacienda")
                        .HasColumnName("mensajeRespHacienda");

                    b.Property<string>("NombreArchivo")
                        .HasColumnName("nombreArchivo")
                        .HasMaxLength(500);

                    b.Property<string>("NombreEmisor")
                        .IsRequired()
                        .HasColumnName("nombreEmisor")
                        .HasMaxLength(160);

                    b.Property<string>("Razon")
                        .HasColumnName("razon")
                        .HasMaxLength(160);

                    b.Property<bool>("ReporteAceptaHacienda")
                        .HasColumnName("reporteAceptaHacienda");

                    b.Property<string>("RutaRespuestaHacienda")
                        .HasColumnName("rutaRespuestaHacienda")
                        .HasMaxLength(500);

                    b.Property<int>("TipoIdEmisor")
                        .HasColumnName("tipoIdEmisor");

                    b.Property<int>("TipoIdEmpresa")
                        .HasColumnName("tipoIdEmpresa");

                    b.Property<decimal>("TotalFactura")
                        .HasColumnName("totalFactura")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal>("TotalImp")
                        .HasColumnName("totalImp")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("UsuarioCrea")
                        .IsRequired()
                        .HasColumnName("usuario_crea")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioUltMod")
                        .IsRequired()
                        .HasColumnName("usuario_ult_mod")
                        .HasMaxLength(30);

                    b.Property<string>("XmlFirmado")
                        .HasColumnName("xmlFirmado")
                        .IsUnicode(false);

                    b.Property<string>("XmlRespuesta")
                        .HasColumnName("xmlRespuesta");

                    b.Property<string>("XmlSinFirma")
                        .HasColumnName("xmlSinFirma")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdEmpresa", "TipoIdEmpresa");

                    b.ToTable("tbReporteHacienda");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbRequerimientos", b =>
                {
                    b.Property<int>("IdReq")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idReq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnName("descripcion")
                        .HasMaxLength(500);

                    b.Property<bool>("Estado")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaCrea")
                        .HasColumnName("fecha_crea")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaUltMod")
                        .HasColumnName("fecha_ult_mod")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("nombre")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioCrea")
                        .IsRequired()
                        .HasColumnName("usuario_crea")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioUltMod")
                        .IsRequired()
                        .HasColumnName("usuario_ult_mod")
                        .HasMaxLength(30);

                    b.HasKey("IdReq");

                    b.ToTable("tbRequerimientos");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbRoles", b =>
                {
                    b.Property<int>("IdRol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idRol")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Descripcion")
                        .HasColumnName("descripcion")
                        .HasMaxLength(500);

                    b.Property<bool>("Estado")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaCrea")
                        .HasColumnName("fecha_crea")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaUltMod")
                        .HasColumnName("fecha_ult_mod")
                        .HasColumnType("datetime");

                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("nombre")
                        .HasMaxLength(30);

                    b.Property<string>("NormalizedName");

                    b.Property<string>("UsuarioCrea")
                        .IsRequired()
                        .HasColumnName("usuario_crea")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioUltMod")
                        .IsRequired()
                        .HasColumnName("usuario_ult_mod")
                        .HasMaxLength(30);

                    b.HasKey("IdRol");

                    b.ToTable("tbRoles");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbSucursales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IdEmpresa")
                        .HasColumnName("idEmpresa")
                        .HasMaxLength(30);

                    b.Property<int>("IdTipoEmpresa")
                        .HasColumnName("idTipoEmpresa");

                    b.Property<string>("Canton")
                        .IsRequired()
                        .HasColumnName("canton")
                        .HasMaxLength(2);

                    b.Property<string>("Direccion")
                        .HasColumnName("direccion")
                        .HasMaxLength(500);

                    b.Property<string>("Distrito")
                        .IsRequired()
                        .HasColumnName("distrito")
                        .HasMaxLength(2);

                    b.Property<DateTime>("FechaCrea")
                        .HasColumnName("fecha_crea")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaUltMod")
                        .HasColumnName("fecha_ult_mod")
                        .HasColumnType("datetime");

                    b.Property<string>("Provincia")
                        .IsRequired()
                        .HasColumnName("provincia")
                        .HasMaxLength(1);

                    b.Property<int?>("Telefono")
                        .HasColumnName("telefono");

                    b.Property<string>("UsuarioCrea")
                        .IsRequired()
                        .HasColumnName("usuario_crea")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioUltMod")
                        .IsRequired()
                        .HasColumnName("usuario_ult_mod")
                        .HasMaxLength(30);

                    b.HasKey("Id", "IdEmpresa", "IdTipoEmpresa");

                    b.HasIndex("IdEmpresa", "IdTipoEmpresa");

                    b.ToTable("tbSucursales");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbTipoClientes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnName("descripcion")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<bool?>("Estado")
                        .HasColumnName("estado");

                    b.Property<DateTime?>("FechaCrea")
                        .HasColumnName("fecha_crea")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaUltMod")
                        .HasColumnName("fecha_ult_mod")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .HasColumnName("nombre")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioCrea")
                        .HasColumnName("usuario_crea")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioUltMod")
                        .HasColumnName("usuario_ult_mod")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("tbTipoClientes");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbTipoDocumento", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Nombre")
                        .HasColumnName("nombre")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("tbTipoDocumento");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbTipoId", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("nombre")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("tbTipoId");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbTipoIngrediente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnName("descripcion")
                        .HasMaxLength(500);

                    b.Property<bool>("Estado")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaCrea")
                        .HasColumnName("fecha_crea")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaUltMod")
                        .HasColumnName("fecha_ult_mod")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("nombre")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioCrea")
                        .IsRequired()
                        .HasColumnName("usuario_crea")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioUltMod")
                        .IsRequired()
                        .HasColumnName("usuario_ult_mod")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("tbTipoIngrediente");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbTipoMedidas", b =>
                {
                    b.Property<int>("IdTipoMedida")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idTipoMedida")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnName("descripcion")
                        .HasMaxLength(500);

                    b.Property<bool>("Estado")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaCrea")
                        .HasColumnName("fecha_crea")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaUltMod")
                        .HasColumnName("fecha_ult_mod")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("nombre")
                        .HasMaxLength(30);

                    b.Property<string>("Nomenclatura")
                        .IsRequired()
                        .HasColumnName("nomenclatura")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("UsuarioCrea")
                        .IsRequired()
                        .HasColumnName("usuario_crea")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioUltMod")
                        .IsRequired()
                        .HasColumnName("usuario_ult_mod")
                        .HasMaxLength(30);

                    b.HasKey("IdTipoMedida");

                    b.ToTable("tbTipoMedidas");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbTipoMoneda", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<bool>("Estado")
                        .HasColumnName("estado");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("nombre")
                        .HasMaxLength(30);

                    b.Property<string>("Siglas")
                        .IsRequired()
                        .HasColumnName("siglas")
                        .HasMaxLength(3);

                    b.Property<string>("Simbolo")
                        .IsRequired()
                        .HasColumnName("simbolo")
                        .HasMaxLength(1);

                    b.HasKey("Id");

                    b.ToTable("tbTipoMoneda");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbTipoMovimiento", b =>
                {
                    b.Property<int>("IdTipo")
                        .HasColumnName("idTipo");

                    b.Property<short>("AfectaConta")
                        .HasColumnName("afecta_conta");

                    b.Property<string>("Descripcion")
                        .HasColumnName("descripcion")
                        .HasMaxLength(30);

                    b.Property<bool>("Estado")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaCrea")
                        .HasColumnName("fecha_crea")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaUltMod")
                        .HasColumnName("fecha_ult_mod")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("nombre")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioCrea")
                        .IsRequired()
                        .HasColumnName("usuario_crea")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioUltMod")
                        .IsRequired()
                        .HasColumnName("usuario_ult_mod")
                        .HasMaxLength(30);

                    b.HasKey("IdTipo");

                    b.ToTable("tbTipoMovimiento");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbTipoPago", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("nombre")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("tbTipoPago");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbTipoPuesto", b =>
                {
                    b.Property<int>("IdTipoPuesto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idTipoPuesto")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnName("descripcion")
                        .HasMaxLength(500);

                    b.Property<bool>("Estado")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaCrea")
                        .HasColumnName("fecha_crea")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaUltMod")
                        .HasColumnName("fecha_ult_mod")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("nombre")
                        .HasMaxLength(30);

                    b.Property<double?>("PrecioExt")
                        .HasColumnName("precio_ext");

                    b.Property<double?>("PrecioHora")
                        .HasColumnName("precio_hora");

                    b.Property<string>("UsuarioCrea")
                        .IsRequired()
                        .HasColumnName("usuario_crea")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioUltMod")
                        .IsRequired()
                        .HasColumnName("usuario_ult_mod")
                        .HasMaxLength(30);

                    b.HasKey("IdTipoPuesto");

                    b.ToTable("tbTipoPuesto");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbTipoVenta", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Nombre")
                        .HasColumnName("nombre")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("tbTipoVenta");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbUsuarios", b =>
                {
                    b.Property<int>("TipoId")
                        .HasColumnName("tipoId");

                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(30);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasColumnName("contraseña")
                        .HasMaxLength(30);

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("Estado")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaCrea")
                        .HasColumnName("fecha_crea")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaUltMod")
                        .HasColumnName("fecha_ult_mod")
                        .HasColumnType("datetime");

                    b.Property<string>("FotoUrl")
                        .HasColumnName("foto_url")
                        .HasMaxLength(500);

                    b.Property<string>("IdEmpresa")
                        .IsRequired()
                        .HasColumnName("idEmpresa")
                        .HasMaxLength(30);

                    b.Property<int>("IdRol")
                        .HasColumnName("idRol");

                    b.Property<int?>("IdTipoIdEmpresa")
                        .HasColumnName("idTipoIdEmpresa");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasColumnName("nombreUsuario")
                        .HasMaxLength(30);

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.Property<string>("UsuarioCrea")
                        .IsRequired()
                        .HasColumnName("usuario_crea")
                        .HasMaxLength(30);

                    b.Property<string>("UsuarioUltMod")
                        .IsRequired()
                        .HasColumnName("usuario_ult_mod")
                        .HasMaxLength(30);

                    b.HasKey("TipoId", "Id");

                    b.HasIndex("IdRol")
                        .HasName("IX_FK_tbUsuarios_tbRoles");

                    b.HasIndex("IdEmpresa", "IdTipoIdEmpresa");

                    b.ToTable("tbUsuarios");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbBarrios", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbDistrito", "TbDistrito")
                        .WithMany("TbBarrios")
                        .HasForeignKey("Provincia", "Canton", "Distrito")
                        .HasConstraintName("FK_tbBarrios_tbDistrito");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbCajas", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbSucursales", "IdNavigation")
                        .WithMany("TbCajas")
                        .HasForeignKey("IdSucursal", "IdEmpresa", "IdTipoEmpresa")
                        .HasConstraintName("FK_tbCajas_tbSucursales");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbCajaUsuario", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbUsuarios", "TbUsuarios")
                        .WithMany("TbCajaUsuario")
                        .HasForeignKey("TipoId", "IdUser")
                        .HasConstraintName("FK_tbCajaUsuario_tbUsuarios");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbCajaUsuMonedas", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbCajaUsuario", "IdCajaUsuarioNavigation")
                        .WithMany("TbCajaUsuMonedas")
                        .HasForeignKey("IdCajaUsuario")
                        .HasConstraintName("FK_tbCajaUsuMonedas_tbCajaUsuario");

                    b.HasOne("AppFacturadorApi.Entities.Model.TbMonedas", "IdMonedaNavigation")
                        .WithMany("TbCajaUsuMonedas")
                        .HasForeignKey("IdMoneda")
                        .HasConstraintName("FK_tbCajaUsuMonedas_tbMonedas");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbCanton", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbProvincia", "ProvinciaNavigation")
                        .WithMany("TbCanton")
                        .HasForeignKey("Provincia")
                        .HasConstraintName("FK_tbCanton_tbProvincia");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbClientes", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbExoneraciones", "IdExonercionNavigation")
                        .WithMany("TbClientes")
                        .HasForeignKey("IdExonercion")
                        .HasConstraintName("FK_tbClientes_tbExoneraciones");

                    b.HasOne("AppFacturadorApi.Entities.Model.TbTipoClientes", "TipoClienteNavigation")
                        .WithMany("TbClientes")
                        .HasForeignKey("TipoCliente")
                        .HasConstraintName("FK_tbClientes_tbTipoClientes");

                    b.HasOne("AppFacturadorApi.Entities.Model.TbPersona", "TbPersona")
                        .WithMany("TbClientes")
                        .HasForeignKey("TipoId", "Id")
                        .HasConstraintName("FK_tbClientes_tbPersona");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbCreditos", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbMovimientos", "IdMovNavigation")
                        .WithMany("TbCreditos")
                        .HasForeignKey("IdMov")
                        .HasConstraintName("FK_tbCreditos_tbMovimientos");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbDetalleDocumento", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbProducto", "IdProductoNavigation")
                        .WithMany("TbDetalleDocumento")
                        .HasForeignKey("IdProducto")
                        .HasConstraintName("FK_tbDetalleFactura_tbProducto");

                    b.HasOne("AppFacturadorApi.Entities.Model.TbDocumento", "Id")
                        .WithMany("TbDetalleDocumento")
                        .HasForeignKey("IdDoc", "IdTipoDoc")
                        .HasConstraintName("FK_tbDetalleDocumento_tbDocumento");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbDetalleMovimiento", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbIngredientes", "IdIngredienteNavigation")
                        .WithMany("TbDetalleMovimiento")
                        .HasForeignKey("IdIngrediente")
                        .HasConstraintName("FK_tbDetalleMovimiento_tbIngredientes");

                    b.HasOne("AppFacturadorApi.Entities.Model.TbMovimientos", "IdMovNavigation")
                        .WithMany("TbDetalleMovimiento")
                        .HasForeignKey("IdMov")
                        .HasConstraintName("FK_tbDetalleMovimiento_tbMovimientos");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbDetalleProducto", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbIngredientes", "IdIngredienteNavigation")
                        .WithMany("TbDetalleProducto")
                        .HasForeignKey("IdIngrediente")
                        .HasConstraintName("FK_tbDetalleProducto_tbIngredientes");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbDistrito", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbCanton", "TbCanton")
                        .WithMany("TbDistrito")
                        .HasForeignKey("Provincia", "Canton")
                        .HasConstraintName("FK_tbDistrito_tbCanton");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbDocumento", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbTipoDocumento", "TipoDocumentoNavigation")
                        .WithMany("TbDocumento")
                        .HasForeignKey("TipoDocumento")
                        .HasConstraintName("FK_tbDocumento_tbTipoDocumento");

                    b.HasOne("AppFacturadorApi.Entities.Model.TbTipoMoneda", "TipoMonedaNavigation")
                        .WithMany("TbDocumento")
                        .HasForeignKey("TipoMoneda")
                        .HasConstraintName("FK_tbDocumento_tbTipoMoneda");

                    b.HasOne("AppFacturadorApi.Entities.Model.TbTipoPago", "TipoPagoNavigation")
                        .WithMany("TbDocumento")
                        .HasForeignKey("TipoPago")
                        .HasConstraintName("FK_tbDocumento_tbTipoPago");

                    b.HasOne("AppFacturadorApi.Entities.Model.TbTipoVenta", "TipoVentaNavigation")
                        .WithMany("TbDocumento")
                        .HasForeignKey("TipoVenta")
                        .HasConstraintName("FK_tbDocumento_tbTipoVenta");

                    b.HasOne("AppFacturadorApi.Entities.Model.TbClientes", "TbClientes")
                        .WithMany("TbDocumento")
                        .HasForeignKey("IdCliente", "TipoIdCliente")
                        .HasConstraintName("FK_tbFactura_tbClientes");

                    b.HasOne("AppFacturadorApi.Entities.Model.TbEmpresa", "TbEmpresa")
                        .WithMany("TbDocumento")
                        .HasForeignKey("IdEmpresa", "TipoIdEmpresa")
                        .HasConstraintName("FK_tbDocumento_tbEmpresa");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbEmpleado", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbTipoPuesto", "IdPuestoNavigation")
                        .WithMany("TbEmpleado")
                        .HasForeignKey("IdPuesto")
                        .HasConstraintName("FK_tbEmpleado_tbTipoPuesto");

                    b.HasOne("AppFacturadorApi.Entities.Model.TbPersona", "TbPersona")
                        .WithMany("TbEmpleado")
                        .HasForeignKey("TipoId", "Id")
                        .HasConstraintName("FK_tbEmpleado_tbPersona");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbEmpresa", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbPersona", "TbPersona")
                        .WithMany("TbEmpresa")
                        .HasForeignKey("TipoId", "Id")
                        .HasConstraintName("FK_tbEmpresa_tbPersona");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbHorarioProveedor", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbProveedores", "Id")
                        .WithMany("TbHorarioProveedor")
                        .HasForeignKey("IdProveedor", "IdTipo")
                        .HasConstraintName("FK_tbHorarioProveedor_tbProveedores");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbIngredienteProveedor", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbIngredientes", "TbIngredientesIdIngredienteNavigation")
                        .WithMany("TbIngredienteProveedor")
                        .HasForeignKey("TbIngredientesIdIngrediente")
                        .HasConstraintName("FK_tbIngredienteProveedor_tbIngredientes");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbIngredientes", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbTipoIngrediente", "IdTipoIngredienteNavigation")
                        .WithMany("TbIngredientes")
                        .HasForeignKey("IdTipoIngrediente")
                        .HasConstraintName("FK_tbIngredientes_tbTipoIngrediente");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbMonedas", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbTipoMoneda", "IdTipoMonedaNavigation")
                        .WithMany("TbMonedas")
                        .HasForeignKey("IdTipoMoneda")
                        .HasConstraintName("FK_tbMonedas_tbTipoMoneda");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbMovimientoCajaUsuario", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbCajaUsuario", "TbCajaUsuario")
                        .WithMany("TbMovimientoCajaUsuario")
                        .HasForeignKey("TbCajaUsuarioId")
                        .HasConstraintName("FK_tbMovimientoCajaUsuario_tbCajaUsuario");

                    b.HasOne("AppFacturadorApi.Entities.Model.TbMovimientos", "TbMovimientosIdMovimientoNavigation")
                        .WithMany("TbMovimientoCajaUsuario")
                        .HasForeignKey("TbMovimientosIdMovimiento")
                        .HasConstraintName("FK_tbMovimientoCajaUsuario_tbMovimientos");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbMovimientos", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbTipoMovimiento", "IdTipoMovNavigation")
                        .WithMany("TbMovimientos")
                        .HasForeignKey("IdTipoMov")
                        .HasConstraintName("FK_tbMovimientos_tbTipoMovimiento");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbPagos", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbMovimientos", "IdMovimientoNavigation")
                        .WithMany("TbPagos")
                        .HasForeignKey("IdMovimiento")
                        .HasConstraintName("FK_tbPagos_tbMovimientos");

                    b.HasOne("AppFacturadorApi.Entities.Model.TbEmpleado", "TbEmpleado")
                        .WithMany("TbPagos")
                        .HasForeignKey("IdEmpleado", "TipoId")
                        .HasConstraintName("FK_tbPagos_tbEmpleado");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbParametrosEmpresa", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbEmpresa", "IdNavigation")
                        .WithMany("TbParametrosEmpresa")
                        .HasForeignKey("IdEmpresa", "IdTipoEmpresa")
                        .HasConstraintName("FK_tbParametrosEmpresa_tbEmpresa");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbPermisos", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbRequerimientos", "TbRequerimientosIdReqNavigation")
                        .WithMany("TbPermisos")
                        .HasForeignKey("TbRequerimientosIdReq")
                        .HasConstraintName("FK_tbPermisos_tbRequerimientos");

                    b.HasOne("AppFacturadorApi.Entities.Model.TbRoles", "TbRolesIdRolNavigation")
                        .WithMany("TbPermisos")
                        .HasForeignKey("TbRolesIdRol")
                        .HasConstraintName("FK_tbPermisos_tbRoles");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbPersona", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbTipoId", "Tipo")
                        .WithMany("TbPersona")
                        .HasForeignKey("TipoId")
                        .HasConstraintName("FK_tbPersona_tbTipoId");

                    b.HasOne("AppFacturadorApi.Entities.Model.TbBarrios", "TbBarrios")
                        .WithMany("TbPersona")
                        .HasForeignKey("Provincia", "Canton", "Distrito", "Barrio")
                        .HasConstraintName("FK_tbPersona_tbBarrios");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbProducto", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbCategoriaProducto", "IdCategoriaNavigation")
                        .WithMany("TbProducto")
                        .HasForeignKey("IdCategoria")
                        .HasConstraintName("FK_tbProducto_tbCategoriaProducto");

                    b.HasOne("AppFacturadorApi.Entities.Model.TbTipoMedidas", "IdMedidaNavigation")
                        .WithMany("TbProducto")
                        .HasForeignKey("IdMedida")
                        .HasConstraintName("FK_tbProducto_tbTipoMedidas");

                    b.HasOne("AppFacturadorApi.Entities.Model.TbInventario", "IdProductoNavigation")
                        .WithOne("TbProducto")
                        .HasForeignKey("AppFacturadorApi.Entities.Model.TbProducto", "IdProducto")
                        .HasConstraintName("FK_tbProducto_tbInventario");

                    b.HasOne("AppFacturadorApi.Entities.Model.TbImpuestos", "IdTipoImpuestoNavigation")
                        .WithMany("TbProducto")
                        .HasForeignKey("IdTipoImpuesto")
                        .HasConstraintName("FK_tbProducto_tbImpuestos");

                    b.HasOne("AppFacturadorApi.Entities.Model.TbProveedores", "Id")
                        .WithMany("TbProducto")
                        .HasForeignKey("IdProveedor", "IdTipoIdProveedor")
                        .HasConstraintName("FK_tbProducto_tbProveedores");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbProveedores", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbPersona", "TbPersona")
                        .WithMany("TbProveedores")
                        .HasForeignKey("TipoId", "Id")
                        .HasConstraintName("FK_tbProveedores_tbPersona");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbReporteHacienda", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbEmpresa", "TbEmpresa")
                        .WithMany("TbReporteHacienda")
                        .HasForeignKey("IdEmpresa", "TipoIdEmpresa")
                        .HasConstraintName("FK_tbReporteHacienda_tbEmpresa");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbSucursales", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbEmpresa", "IdNavigation")
                        .WithMany("TbSucursales")
                        .HasForeignKey("IdEmpresa", "IdTipoEmpresa")
                        .HasConstraintName("FK_tbSucursales_tbEmpresa");
                });

            modelBuilder.Entity("AppFacturadorApi.Entities.Model.TbUsuarios", b =>
                {
                    b.HasOne("AppFacturadorApi.Entities.Model.TbRoles", "IdRolNavigation")
                        .WithMany("TbUsuarios")
                        .HasForeignKey("IdRol")
                        .HasConstraintName("FK_tbUsuarios_tbRoles");

                    b.HasOne("AppFacturadorApi.Entities.Model.TbEmpresa", "IdNavigation")
                        .WithMany("TbUsuarios")
                        .HasForeignKey("IdEmpresa", "IdTipoIdEmpresa")
                        .HasConstraintName("FK_tbUsuarios_tbEmpresa");

                    b.HasOne("AppFacturadorApi.Entities.Model.TbPersona", "TbPersona")
                        .WithOne("TbUsuarios")
                        .HasForeignKey("AppFacturadorApi.Entities.Model.TbUsuarios", "TipoId", "Id")
                        .HasConstraintName("FK_tbUsuarios_tbPersona");
                });
#pragma warning restore 612, 618
        }
    }
}
